var tipuesearch = {"pages":[{"text":"fidbits C to scalar Fortran string example Cast an element from an array (ragged?) of C char s as a Fortran scalar character An example of some code that can cast an element from a C array of char strings as a Fortran character scalar of length >=\n1. This code was adapted from a posting by @IanHarvey at https://software.intel.com/en-us/forums/intel-visual-fortran-compiler-for-windows/topic/392505. The key insight is that a character dummy argument, foo , may be\ndeclared with a len=<lenght> parameter such that <length> * size(foo) = the size() of the character(len=1) actual\nargument. To simply swap an array of character(len=1) into a scalar\npass the size() of the actual argument as an argument to the\nsubroutine, and then the intent(in) dummy argument will have the target attribute and be a rank 1 array with extents [1] . The intent(out) variable will be character(len=:), pointer and pointer\nassignment is used to persist the dummy argument recasting/reshaping\nonce the scope of the procedure is left. See the functions in c_f_string.f90 . FORD generated documentation can be viewed at https://sourceryinstitute.github.io/fidbits/src/interoperable-strings/doc/index.html Correct output looks like: ./example\nSpeciesName_C(1): N\nSpeciesName_C(1): N\nSpeciesName_C(2): N2\nSpeciesName_C(2): N2\nSpeciesName_C(3): NO\nSpeciesName_C(3): NO\nSpeciesName_C(4): NO2\nSpeciesName_C(4): NO2\nSpeciesName_C(5): O\nSpeciesName_C(5): O\nSpeciesName_C(6): O2\nSpeciesName_C(6): O2\nSpeciesName_C(7): O3\nSpeciesName_C(7): O3 Developer Info Izaak \"Zaak\" Beekman Zaak is an \"HPC Scientist\" at ParaTools Inc. and Fortran evangelist","tags":"","loc":"index.html","title":" fidbits C to scalar Fortran string example "},{"text":"Module to convert c strings to Fortran strings while trying to minimize\n copies Files Dependent On This One sourcefile~~c_f_string.f90~~AfferentGraph sourcefile~c_f_string.f90 c_f_string.f90 sourcefile~example.f90 example.f90 sourcefile~c_f_string.f90->sourcefile~example.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules c_f_string_m Source Code c_f_string.f90 Source Code !! author: Izaak \"Zaak\" Beekman !! date: 2017-09-29 !! display: true !! graph: true !! !! Module to convert c strings to Fortran strings while trying to minimize !! copies module c_f_string_m !! author: Izaak \"Zaak\" Beekman !! date: 2017-09-29 !! display: true !! graph: true !! !! Module to convert c strings to Fortran strings while trying to minimize !! copies implicit none private public :: c_f_string , c_str_to_fortran interface !! author: Izaak \"Zaak\" Beekman !! date: 2017-09-29 !! display: true !! graph: true !! !! Interface with C std lib's `strlen` function strlen ( str ) result ( res ) bind ( c , name = 'strlen' ) !! author: Izaak \"Zaak\" Beekman !! date: 2017-09-29 !! display: true !! graph: true !! !! C's std lib `strlen` function use , intrinsic :: ISO_C_BINDING , only : c_ptr , c_size_t type ( c_ptr ), intent ( in ), value :: str !! C string integer ( c_size_t ) :: res !! Length of string, i.e., !! `merge(index(str,c_null_char)-1,0,index(str,c_null_char)>0)` end function end interface contains subroutine c_f_string ( c_str , f_str ) !! author: Izaak \"Zaak\" Beekman !! date: 2017-09-29 !! display: true !! graph: true !! proc_internals: true !! !! Recast a C string as a Fortran scalar character pointer !! !! @warning `f_str` will become a dangling pointer if the thing pointed at !! by `c_str` becomes undefined, USE WITH CAUTION! !! !! @warning `f_str` must be of type `c_char`. Client code should declare !! the actual argument corresponding to `f_str` as !! `character(kind=c_char,len=:), pointer` and then perform type conversion !! native `character()` kind via assignment. !! !! @note This solution was inspired by @ianh's post on the Intel Fortran !! compiler forum at !! <https://software.intel.com/en-us/forums/intel-visual-fortran-compiler-for-windows/topic/392505> use , intrinsic :: ISO_C_BINDING , only : c_char , c_f_pointer , c_ptr type ( c_ptr ), intent ( in ) :: c_str !! C `char` string to convert to a scalar Fortran string character ( kind = c_char , len = :), pointer , intent ( out ) :: f_str !! Scalar `character` `pointer` of type `c_char` corresponding to `c_str` character ( kind = c_char ), pointer :: char_array (:) !! Temp array of length 1 characters call c_f_pointer ( c_str , char_array , [ strlen ( c_str )]) call char_array_to_scalar_ptr ( size ( char_array ), char_array , f_str ) contains subroutine char_array_to_scalar_ptr ( scalar_len , scalar , ptr ) !! author: Izaak \"Zaak\" Beekman !! date: 2017-09-29 !! display: true !! graph: true !! proc_internals: true !! !! Internal procedure to recast pointer to array of length 1 characters !! as pointer scalar character variable of length >= 1 use , intrinsic :: ISO_C_BINDING , only : c_ptr integer , intent ( in ) :: scalar_len !! Length of `character` `pointer` being passed in character ( kind = c_char , len = scalar_len ), intent ( in ), target :: scalar ( 1 ) !! Temporary rank 1, `size() = 1` pointer to character of `len=scalar_len` character ( kind = c_char , len = :), intent ( out ), pointer :: ptr !! Scalar return pointer to persist casting as scalar `character` ptr => scalar ( 1 ) end subroutine end subroutine function c_str_to_fortran ( c_str ) result ( res ) !! author: Izaak \"Zaak\" Beekman !! date: 2017-09-29 !! display: true !! graph: true !! !! Return a Fortran scalar string corresponding to a C string using !! [[c_f_string(proc)]] and then casting it as a non-pointer !! !! @note This will probably cause a temporary variable to be allocated use , intrinsic :: ISO_C_BINDING , only : c_char , c_ptr type ( c_ptr ), intent ( in ) :: c_str !! C string to be converted character ( len = :), allocatable :: res !! Function return, a native Fortran, scalar `character` variable character ( kind = c_char , len = :), pointer :: f_ptr_str !! Temporary variable to point to C string as a native Fortran pointer call c_f_string ( c_str , f_ptr_str ) res = f_ptr_str (:) ! realloc on assignment, type conversion if possible ! and required end function end module","tags":"","loc":"sourcefile/c_f_string.f90.html","title":"c_f_string.f90 – fidbits C to scalar Fortran string example"},{"text":"Example program to show the usage of c_f_string and c_str_to_fortran This File Depends On sourcefile~~example.f90~~EfferentGraph sourcefile~example.f90 example.f90 sourcefile~c_f_string.f90 c_f_string.f90 sourcefile~c_f_string.f90->sourcefile~example.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs main Source Code example.f90 Source Code !! author: Izaak \"Zaak\" Beekman !! date: 2017-09-29 !! display: true !! graph: true !! !! Example program to show the usage of [[c_f_string(proc)]] and [[c_str_to_fortran(proc)]] program main !! author: Izaak \"Zaak\" Beekman !! date: 2017-09-29 !! display: true !! graph: true !! !! Example program to show the usage of [[c_f_string(proc)]] and [[c_str_to_fortran(proc)]] !! Correct output looks like: !! !! ``` !! ./example !! SpeciesName_C(1): N !! SpeciesName_C(1): N !! SpeciesName_C(2): N2 !! SpeciesName_C(2): N2 !! SpeciesName_C(3): NO !! SpeciesName_C(3): NO !! SpeciesName_C(4): NO2 !! SpeciesName_C(4): NO2 !! SpeciesName_C(5): O !! SpeciesName_C(5): O !! SpeciesName_C(6): O2 !! SpeciesName_C(6): O2 !! SpeciesName_C(7): O3 !! SpeciesName_C(7): O3 !! ``` use c_f_string_m , only : c_f_string , c_str_to_fortran use , intrinsic :: ISO_FORTRAN_ENV , only : stdout => output_unit use , intrinsic :: ISO_C_BINDING , only : c_char , c_ptr , c_size_t implicit none integer , parameter :: n_elem = 7 interface !! author: Izaak \"Zaak\" Beekman !! date: 2017-09-29 !! display: true !! graph: true !! !! Interface with `SpeciesName` from [[str_array.c]] function SpeciesName_C ( idx ) result ( res ) bind ( c , name = 'SpeciesName' ) !! author: Izaak \"Zaak\" Beekman !! date: 2017-09-29 !! display: true !! graph: true !! !! Interface for function `SpeciesName` declared in [[str_array.c]] use , intrinsic :: ISO_C_BINDING , only : c_size_t , c_ptr integer ( c_size_t ), value , intent ( in ) :: idx !! Index of const char* array to retrieve type ( c_ptr ) :: res !! Returned string end function end interface block integer :: i integer ( c_size_t ) :: c_idx character ( kind = c_char , len = :), pointer :: f_char_ptr do i = 1 , n_elem c_idx = i - 1 write ( stdout , '(A, I0, A, A)' ) \"SpeciesName_C(\" , i , \"): \" , c_str_to_fortran ( SpeciesName_C ( c_idx )) call c_f_string ( SpeciesName_C ( c_idx ), f_char_ptr ) write ( stdout , '(A, I0, A, A)' ) \"SpeciesName_C(\" , i , \"): \" , f_char_ptr end do end block end program","tags":"","loc":"sourcefile/example.f90.html","title":"example.f90 – fidbits C to scalar Fortran string example"},{"text":"Source Code str_array.c Source Code // author: Izaak \"Zaak\" Beekman // date: 2017-09-29 // display: true // graph: true // // Golbal constant array of chemical species names and accessor function, // `SpeciesName` /** *   \\file str_array.c *   \\brief A C file defining a global array of strings and an accessor method * *  Define a global array of strings and an accessor method, for testing *  Fortran string interoperability * */ #include <string.h> #include <stddef.h> #include \"str_array.h\" /** * A global immutable array of strings representing a set of chemical species */ char const * const SPECIES [ 7 ] = { // A global immutable array of strings representing a set of chemical species \"N\" , \"N2\" , \"NO\" , \"NO2\" , \"O\" , \"O2\" , \"O3\" }; /** *  \\brief Return char string corresponding to index idx * *  Return char string for species corresponding to index idx * *  \\param[in] idx Index of species string to return *  \\return return type */ char const * SpeciesName ( size_t const idx ) // Accessor function to return species name at index `idx` { return SPECIES [ idx ]; }","tags":"","loc":"sourcefile/str_array.c.html","title":"str_array.c – fidbits C to scalar Fortran string example"},{"text":"Source Code str_array.h Source Code /** *   \\file str_array.h *   \\brief A global array of char strings containing species names and an *   accessor function * *  An global, constant array of species names and a function to return them *  by index. * */ #ifndef __STR_ARRAY_H__ #define __STR_ARRAY_H__ /** * Global array of species names */ extern char const * const SPECIES [ 7 ]; /** *  \\brief Return char string corresponding to index idx * *  Return char string for species corresponding to index idx * *  \\param[in] idx Index of species string to return *  \\return return type */ char const * SpeciesName ( size_t const idx ); #endif","tags":"","loc":"sourcefile/str_array.h.html","title":"str_array.h – fidbits C to scalar Fortran string example"},{"text":"public function c_str_to_fortran(c_str) result(res) Uses: ISO_C_BINDING proc~~c_str_to_fortran~~UsesGraph proc~c_str_to_fortran c_str_to_fortran ISO_C_BINDING ISO_C_BINDING ISO_C_BINDING->proc~c_str_to_fortran Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Return a Fortran scalar string corresponding to a C string using c_f_string and then casting it as a non-pointer Note This will probably cause a temporary variable to be allocated Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: c_str C string to be converted Return Value character(len=:),\n  allocatable Function return, a native Fortran, scalar character variable Calls proc~~c_str_to_fortran~~CallsGraph proc~c_str_to_fortran c_str_to_fortran proc~c_f_string c_f_string proc~c_str_to_fortran->proc~c_f_string interface~strlen strlen proc~c_f_string->interface~strlen none~char_array_to_scalar_ptr char_array_to_scalar_ptr proc~c_f_string->none~char_array_to_scalar_ptr Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~c_str_to_fortran~~CalledByGraph proc~c_str_to_fortran c_str_to_fortran program~main main program~main->proc~c_str_to_fortran Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables f_ptr_str Variables Type Visibility Attributes Name Initial character(kind=c_char,len=:), public, pointer :: f_ptr_str Temporary variable to point to C string as a native Fortran pointer","tags":"","loc":"proc/c_str_to_fortran.html","title":"c_str_to_fortran – fidbits C to scalar Fortran string example"},{"text":"public subroutine c_f_string(c_str, f_str) Uses: ISO_C_BINDING proc~~c_f_string~~UsesGraph proc~c_f_string c_f_string ISO_C_BINDING ISO_C_BINDING ISO_C_BINDING->proc~c_f_string Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Recast a C string as a Fortran scalar character pointer Warning f_str will become a dangling pointer if the thing pointed at\n by c_str becomes undefined, USE WITH CAUTION! Warning f_str must be of type c_char . Client code should declare\n the actual argument corresponding to f_str as character(kind=c_char,len=:), pointer and then perform type conversion\n native character() kind via assignment. Note This solution was inspired by @ianh's post on the Intel Fortran\n compiler forum at https://software.intel.com/en-us/forums/intel-visual-fortran-compiler-for-windows/topic/392505 Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: c_str C char string to convert to a scalar Fortran string character(kind=c_char,len=:), intent(out), pointer :: f_str Scalar character pointer of type c_char corresponding to c_str Calls proc~~c_f_string~~CallsGraph proc~c_f_string c_f_string interface~strlen strlen proc~c_f_string->interface~strlen none~char_array_to_scalar_ptr char_array_to_scalar_ptr proc~c_f_string->none~char_array_to_scalar_ptr Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~c_f_string~~CalledByGraph proc~c_f_string c_f_string proc~c_str_to_fortran c_str_to_fortran proc~c_str_to_fortran->proc~c_f_string program~main main program~main->proc~c_f_string program~main->proc~c_str_to_fortran Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables char_array Subroutines char_array_to_scalar_ptr Variables Type Visibility Attributes Name Initial character(kind=c_char), public, pointer :: char_array (:) Temp array of length 1 characters Subroutines subroutine char_array_to_scalar_ptr(scalar_len, scalar, ptr) Author Izaak \"Zaak\" Beekman Date 2017-09-29 Internal procedure to recast pointer to array of length 1 characters\n as pointer scalar character variable of length >= 1 Arguments Type Intent Optional Attributes Name integer, intent(in) :: scalar_len Length of character pointer being passed in character(kind=c_char,len=scalar_len), intent(in), target :: scalar (1) Temporary rank 1, size() = 1 pointer to character of len=scalar_len character(kind=c_char,len=:), intent(out), pointer :: ptr Scalar return pointer to persist casting as scalar character","tags":"","loc":"proc/c_f_string.html","title":"c_f_string – fidbits C to scalar Fortran string example"},{"text":"interface Interface with C std lib's strlen Called By interface~~strlen~~CalledByGraph interface~strlen strlen proc~c_f_string c_f_string proc~c_f_string->interface~strlen proc~c_str_to_fortran c_str_to_fortran proc~c_str_to_fortran->proc~c_f_string program~main main program~main->proc~c_f_string program~main->proc~c_str_to_fortran Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private function strlen(str) result(res) bind(c, name='strlen') Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in), value :: str C string Return Value integer(kind=c_size_t) Length of string, i.e., merge(index(str,c_null_char)-1,0,index(str,c_null_char)>0) Description C's std lib strlen function","tags":"","loc":"interface/strlen.html","title":"strlen – fidbits C to scalar Fortran string example"},{"text":"interface Interface with SpeciesName from str_array.c Called By interface~~speciesname_c~~CalledByGraph interface~speciesname_c SpeciesName_C program~main main program~main->interface~speciesname_c Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. function SpeciesName_C(idx) result(res) bind(c, name='SpeciesName') Arguments Type Intent Optional Attributes Name integer(kind=c_size_t), intent(in), value :: idx Index of const char* array to retrieve Return Value type(c_ptr) Returned string Description Interface for function SpeciesName declared in str_array.c","tags":"","loc":"interface/speciesname_c.html","title":"SpeciesName_C – fidbits C to scalar Fortran string example"},{"text":"Module to convert c strings to Fortran strings while trying to minimize\n copies Used By module~~c_f_string_m~~UsedByGraph module~c_f_string_m c_f_string_m program~main main module~c_f_string_m->program~main Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Interfaces strlen Functions c_str_to_fortran Subroutines c_f_string Interfaces interface Interface with C std lib's strlen private function strlen (str) result(res) bind(c, name='strlen') Author Izaak \"Zaak\" Beekman Date 2017-09-29 C's std lib strlen function Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in), value :: str C string Return Value integer(kind=c_size_t) Length of string, i.e., merge(index(str,c_null_char)-1,0,index(str,c_null_char)>0) Functions public function c_str_to_fortran (c_str) result(res) Author Izaak \"Zaak\" Beekman Date 2017-09-29 Return a Fortran scalar string corresponding to a C string using c_f_string and then casting it as a non-pointer Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: c_str C string to be converted Return Value character(len=:),\n  allocatable Function return, a native Fortran, scalar character variable Subroutines public subroutine c_f_string (c_str, f_str) Author Izaak \"Zaak\" Beekman Date 2017-09-29 Recast a C string as a Fortran scalar character pointer Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: c_str C char string to convert to a scalar Fortran string character(kind=c_char,len=:), intent(out), pointer :: f_str Scalar character pointer of type c_char corresponding to c_str","tags":"","loc":"module/c_f_string_m.html","title":"c_f_string_m – fidbits C to scalar Fortran string example"},{"text":"Uses: c_f_string_m ISO_FORTRAN_ENV ISO_C_BINDING program~~main~~UsesGraph program~main main ISO_C_BINDING ISO_C_BINDING ISO_C_BINDING->program~main module~c_f_string_m c_f_string_m module~c_f_string_m->program~main ISO_FORTRAN_ENV ISO_FORTRAN_ENV ISO_FORTRAN_ENV->program~main Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Example program to show the usage of c_f_string and c_str_to_fortran Correct output looks like: ./example\n SpeciesName_C(1): N\n SpeciesName_C(1): N\n SpeciesName_C(2): N2\n SpeciesName_C(2): N2\n SpeciesName_C(3): NO\n SpeciesName_C(3): NO\n SpeciesName_C(4): NO2\n SpeciesName_C(4): NO2\n SpeciesName_C(5): O\n SpeciesName_C(5): O\n SpeciesName_C(6): O2\n SpeciesName_C(6): O2\n SpeciesName_C(7): O3\n SpeciesName_C(7): O3 Calls program~~main~~CallsGraph program~main main proc~c_str_to_fortran c_str_to_fortran program~main->proc~c_str_to_fortran interface~speciesname_c SpeciesName_C program~main->interface~speciesname_c proc~c_f_string c_f_string program~main->proc~c_f_string proc~c_str_to_fortran->proc~c_f_string interface~strlen strlen proc~c_f_string->interface~strlen none~char_array_to_scalar_ptr char_array_to_scalar_ptr proc~c_f_string->none~char_array_to_scalar_ptr Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables n_elem Interfaces SpeciesName_C Variables Type Attributes Name Initial integer, parameter :: n_elem = 7 Interfaces interface Interface with SpeciesName from str_array.c function SpeciesName_C (idx) result(res) bind(c, name='SpeciesName') Author Izaak \"Zaak\" Beekman Date 2017-09-29 Interface for function SpeciesName declared in str_array.c Arguments Type Intent Optional Attributes Name integer(kind=c_size_t), intent(in), value :: idx Index of const char* array to retrieve Return Value type(c_ptr) Returned string","tags":"","loc":"program/main.html","title":"main – fidbits C to scalar Fortran string example"}]}